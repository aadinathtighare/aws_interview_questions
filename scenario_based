ЁЯФ╣ Scenario-based DevOps Interview Q&A (5+ Yrs Exp)
1. Scenario: Prod рдордзреНрдпреЗ pod рд╡рд╛рд░рдВрд╡рд╛рд░ crash рд╣реЛрддрдВрдп.

Answer:

kubectl describe pod <pod-name> тЖТ Events check рдХрд░рддреЛ.

kubectl logs <pod-name> тЖТ app logs рдкрд╛рд╣рддреЛ.

рдЬрд░ liveness/readiness probe issue рдЕрд╕реЗрд▓ рддрд░ probe config fix рдХрд░рддреЛ.

рдЬрд░ resource рдХрдореА рдЕрд╕реЗрд▓ (CPU/memory), HPA рд╡рд╛рдкрд░рддреЛ.

ЁЯСЙ Example: Java app OOMKilled рдЭрд╛рд▓рдВ тЖТ limits increase рдХреЗрд▓реА + memory leak fix.

2. Scenario: Jenkins job рдЕрдЪрд╛рдирдХ fail рдЭрд╛рд▓рдВ.

Answer:

Console output рдордзреНрдпреЗ error trace рдХрд░рддреЛ.

Git repo access/credentials check рдХрд░рддреЛ.

Workspace corrupt рдЕрд╕реЗрд▓ рддрд░ clean рдХрд░реВрди job re-run рдХрд░рддреЛ.
ЁЯСЙ Best practice: Pipeline рдордзреНрдпреЗ try/catch рд╡рд╛рдкрд░рддреЛ + Slack alerts configure рдХрд░рддреЛ.

3. Scenario: S3 рдордзреВрди accidental data delete рдЭрд╛рд▓рдВ.

Answer:

S3 Versioning enabled рдЕрд╕реЗрд▓ рддрд░ old version restore рдХрд░рддреЛ.

рдирд╛рд╣реА рдЕрд╕рд▓реНрдпрд╛рд╕, DR plan рд╡рд╛рдкрд░рддреЛ (cross-region backup рдХрд┐рдВрд╡рд╛ Glacier restore).
ЁЯСЙ Lesson: рдиреЗрд╣рдореА versioning + lifecycle policies enable рдХрд░рд╛рдпрдЪреНрдпрд╛.

4. Scenario: EC2 рдордзреНрдпреЗ CPU usage 100% permanently рдЬрд╛рддрдВрдп.

Answer:

SSH рдХрд░реВрди top/htop рдиреЗ culprit process рдУрд│рдЦрддреЛ.

рдЬрд░ sudden traffic рдЕрд╕реЗрд▓ рддрд░ Auto Scaling Group trigger рдХрд░рддреЛ.

рдЬрд░ code issue рдЕрд╕реЗрд▓ рддрд░ rollback рдХрд░рддреЛ.

ЁЯСЙ Example: Node.js API loop рдордзреНрдпреЗ рдЕрдбрдХрд▓реЗрд▓рд╛ тЖТ rollback to stable version.

5. Scenario: Prod рдордзреНрдпреЗ deploy рдХреЗрд▓реНрдпрд╛рд╡рд░ 503 errors рдпреЗрдд рдЖрд╣реЗрдд.

Answer:

First check тЖТ Load balancer health checks.

Pods up рдЖрд╣реЗрдд рдХрд╛ рддреЗ check (kubectl get pods -n prod).

Logs рдкрд╛рд╣рддреЛ app-level + ingress-level.

рдЬрд░ config mismatch рдЕрд╕реЗрд▓ рддрд░ rollback to last stable.

ЁЯСЙ Zero downtime рд╕рд╛рдареА тЖТ Canary deployment рдХрд┐рдВрд╡рд╛ Blue-Green strategy рд╡рд╛рдкрд░рддреЛ.

6. Scenario: Terraform apply рдЕрдбрдХрд▓рд╛ / fail рдЭрд╛рд▓рд╛.

Answer:

terraform plan рдиреЗ infra drift check рдХрд░рддреЛ.

terraform state list рдиреЗ current resources verify рдХрд░рддреЛ.

рдЬрд░ state corrupt рдЕрд╕реЗрд▓ рддрд░ remote backend restore рдХрд░рддреЛ.

ЁЯСЙ Lesson: Always keep remote backend (S3 + DynamoDB lock).

7. Scenario: рдПрдХ region down рдЭрд╛рд▓рд╛ (AWS Outage).

Answer:

Multi-AZ, Multi-region failover plan рд╡рд╛рдкрд░рддреЛ.

Route 53 health checks + DNS failover enabled рдХрд░рддреЛ.

RDS read-replica promote рдХрд░рддреЛ рджреБрд╕рд▒реНрдпрд╛ region рдордзреНрдпреЗ.

ЁЯСЙ Example: US-East-1 down рдЭрд╛рд▓рдВ рддрд░ traffic US-West-2 рд▓рд╛ shift рдХреЗрд▓рдВ.

8. Scenario: Secrets accidentally Git рдордзреНрдпреЗ push рдЭрд╛рд▓реЗ.

Answer:

git reset --soft HEAD~1 рдХрд┐рдВрд╡рд╛ git filter-branch рд╡рд╛рдкрд░реВрди secrets рдХрд╛рдврддреЛ.

Repo рдордзреНрдпреЗ commit delete рдХрд░реВрди force push.

AWS Keys рдЕрд╕рд▓реНрдпрд╛рд╕ тЖТ рд▓рдЧреЗрдЪ revoke рдХрд░рддреЛ + rotate рдХрд░рддреЛ.
ЁЯСЙ Lesson: Always use .gitignore + secret managers.

9. Scenario: Customer рдиреЗ 99.9% uptime SLA рджрд┐рд▓рдВ рдЖрд╣реЗ, рддреЗ рдХрд╕рдВ meet рдХрд░рд╛рд▓?

Answer:

Monitoring (Prometheus + Grafana + Alerts).

Automation (Auto-healing, auto-scaling).

Backups & DR policies.

Blue-Green/Canary deploys to avoid downtime.

ЁЯСЙ SLA 99.9% рдореНрд╣рдгрдЬреЗ рдорд╣рд┐рдиреНрдпрд╛рд▓рд╛ ~43 рдорд┐рдирд┐рдЯ downtime allow рдЖрд╣реЗ.

10. Scenario: Prod deployment рдордзреНрдпреЗ migration script fail рдЭрд╛рд▓рдВ.

Answer:

Rollback script рдареЗрд╡рддреЛ (always reversible migration design).

DB backups рдШреЗрдКрди рдареЗрд╡рддреЛ deploy рдкреВрд░реНрд╡реА.

Partial migration рдЭрд╛рд▓рдВ рдЕрд╕реЗрд▓ рддрд░ reconcile рдХрд░рддреЛ.

ЁЯСЙ Example: Liquibase / Flyway tools рд╡рд╛рдкрд░рддреЛ migrations safe рдХрд░рдгреНрдпрд╛рд╕рд╛рдареА.

тЪб рд╣реЗ scenarios mostly 5 Yrs+ DevOps interviews рдордзреНрдпреЗ рд╡рд┐рдЪрд╛рд░рд▓реЗ рдЬрд╛рддрд╛рдд.
рддреЗрд╡реНрд╣рд╛ рддреБрдЭрдВ answer рдиреЗрд╣рдореА steps + tool + best practice + lesson learnt рдЕрд╢рд╛ structure рдордзреНрдпреЗ рджреНрдпрд╛рдпрдЪрдВ.
